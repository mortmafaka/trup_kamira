{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1hO043tCMrumHP05Es1P2oVLaeSKG4cLd","timestamp":1699390997201}],"gpuType":"T4","mount_file_id":"1hO043tCMrumHP05Es1P2oVLaeSKG4cLd","authorship_tag":"ABX9TyMJFzMcE3Ur3Hrxphr6v38L"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["!pip install catboost"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"L4kLEH6ZfK2R","executionInfo":{"status":"ok","timestamp":1699389365082,"user_tz":-300,"elapsed":11484,"user":{"displayName":"Иван","userId":"01650192778822130219"}},"outputId":"d0808935-8358-49ae-8c2b-bd7b02a18f32"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting catboost\n","  Downloading catboost-1.2.2-cp310-cp310-manylinux2014_x86_64.whl (98.7 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m98.7/98.7 MB\u001b[0m \u001b[31m8.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: graphviz in /usr/local/lib/python3.10/dist-packages (from catboost) (0.20.1)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from catboost) (3.7.1)\n","Requirement already satisfied: numpy>=1.16.0 in /usr/local/lib/python3.10/dist-packages (from catboost) (1.23.5)\n","Requirement already satisfied: pandas>=0.24 in /usr/local/lib/python3.10/dist-packages (from catboost) (1.5.3)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from catboost) (1.11.3)\n","Requirement already satisfied: plotly in /usr/local/lib/python3.10/dist-packages (from catboost) (5.15.0)\n","Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from catboost) (1.16.0)\n","Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2023.3.post1)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.2.0)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (4.44.0)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.4.5)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (23.2)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (9.4.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (3.1.1)\n","Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly->catboost) (8.2.3)\n","Installing collected packages: catboost\n","Successfully installed catboost-1.2.2\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-cbm3LHfdvly","outputId":"f21544f0-4edd-4c3d-a3bc-4d67457c6006"},"outputs":[{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Starting Grid Search...\n"]}],"source":["import sqlite3\n","import numpy as np\n","import pandas as pd\n","from catboost import CatBoostClassifier, Pool, cv\n","from sklearn.model_selection import train_test_split, GridSearchCV\n","from sklearn.metrics import accuracy_score\n","from tqdm import tqdm\n","from hyperopt import hp, fmin, tpe, STATUS_OK, Trials\n","from catboost import CatBoostClassifier\n","from sklearn.metrics import accuracy_score\n","from sklearn.model_selection import cross_val_score, train_test_split\n","\n","# Загрузка данных из SQLite\n","con = sqlite3.connect(\"/content/drive/MyDrive/Colab Notebooks/src/dataset.sqlite\")\n","dataset = \"dataset_2012-23\"\n","df = pd.read_sql_query(f\"SELECT * FROM \\\"{dataset}\\\"\", con, index_col=\"index\")\n","con.close()\n","\n","# Определение целевой переменной и удаление её из набора данных\n","target = df['Home-Team-Win']\n","features = df.drop(['Score', 'Home-Team-Win', 'TEAM_NAME', 'Date', 'TEAM_NAME.1', 'Date.1', 'OU-Cover', 'OU'], axis=1)\n","\n","# Конвертация данных в формат, подходящий для CatBoost\n","X = features.values.astype(float)\n","y = target.values.astype(float)\n","\n","# Разделение данных на обучающий и тестовый наборы\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)\n","\n","# Параметры для Grid Search\n","param_grid = {\n","    'depth': [2,4, 6, 8, 10],\n","    'learning_rate': [0.01,0.03, 0.05,0.07, 0.1, 0.2],\n","    'iterations': [500, 1000],\n","    'l2_leaf_reg': [1,2, 3,4, 5]\n","}\n","\n","# Инициализация CatBoostClassifier\n","catboost_model = CatBoostClassifier(loss_function='Logloss', verbose=False)\n","\n","# Настройка Grid Search\n","grid_search = GridSearchCV(estimator=catboost_model, param_grid=param_grid, cv=3, scoring='accuracy')\n","\n","# Выполнение Grid Search\n","print(\"Starting Grid Search...\")\n","grid_search.fit(X_train, y_train)\n","\n","# Вывод лучших параметров\n","print('Best parameters found by grid search:', grid_search.best_params_)\n","print('Best accuracy by grid search:', grid_search.best_score_)\n","\n","# Обучение модели с лучшими параметрами\n","best_model = CatBoostClassifier(**grid_search.best_params_)\n","best_model.fit(X_train, y_train)\n","\n","# Оценка модели на тестовых данных\n","predictions = best_model.predict(X_test)\n","accuracy = accuracy_score(y_test, predictions)\n","print(f\"Accuracy of the best model on test data: {accuracy}\")\n"]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# Обучаем модель (предполагается, что best_model уже обучена)\n","# best_model.fit(X_train, y_train)\n","\n","# Получаем важность функций\n","feature_importances = best_model.get_feature_importance()\n","\n","# Создаем DataFrame, содержащий имена функций и их важности\n","features_df = pd.DataFrame({\n","    'Features': features.columns,\n","    'Importance': feature_importances\n","})\n","\n","# Сортируем функции по важности\n","features_df = features_df.sort_values(by='Importance', ascending=False)\n","\n","# Создаем график важности функций\n","plt.figure(figsize=(12, 8))\n","sns.barplot(x=\"Importance\", y=\"Features\", data=features_df)\n","plt.title('Feature Importances')\n","plt.xlabel('Importance')\n","plt.ylabel('Features')\n","plt.show()\n"],"metadata":{"id":"6OT9M9x7fQqN"},"execution_count":null,"outputs":[]}]}